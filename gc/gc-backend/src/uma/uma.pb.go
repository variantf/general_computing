// Code generated by protoc-gen-go. DO NOT EDIT.
// source: uma.proto

/*
Package uma is a generated protocol buffer package.

It is generated from these files:
	uma.proto

It has these top-level messages:
	AuthenticateResponse
	ValidateTokenRequest
	User
	AddUserByAuthorizationCodeRequest
	UpdateUserRequest
	AddUserByTelephoneRequest
	AddUserResponse
	RefreshTokenRequest
	FetchUserInfoRequest
	GenerateSecretCodeRequest
	Empty
*/
package uma

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type OAuthType int32

const (
	OAuthType_Wechat OAuthType = 0
	OAuthType_QQ     OAuthType = 1
	OAuthType_Weibo  OAuthType = 2
)

var OAuthType_name = map[int32]string{
	0: "Wechat",
	1: "QQ",
	2: "Weibo",
}
var OAuthType_value = map[string]int32{
	"Wechat": 0,
	"QQ":     1,
	"Weibo":  2,
}

func (x OAuthType) String() string {
	return proto.EnumName(OAuthType_name, int32(x))
}
func (OAuthType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type AuthenticateResponse struct {
	AccessToken   string `protobuf:"bytes,1,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
	RefreshToken  string `protobuf:"bytes,2,opt,name=refresh_token,json=refreshToken" json:"refresh_token,omitempty"`
	TokenType     string `protobuf:"bytes,3,opt,name=token_type,json=tokenType" json:"token_type,omitempty"`
	Id            string `protobuf:"bytes,4,opt,name=id" json:"id,omitempty"`
	Username      string `protobuf:"bytes,5,opt,name=username" json:"username,omitempty"`
	Telephone     string `protobuf:"bytes,6,opt,name=telephone" json:"telephone,omitempty"`
	Openid_Wechat string `protobuf:"bytes,7,opt,name=openid_Wechat,json=openidWechat" json:"openid_Wechat,omitempty"`
	Openid_QQ     string `protobuf:"bytes,8,opt,name=openid_QQ,json=openidQQ" json:"openid_QQ,omitempty"`
	Openid_Weibo  string `protobuf:"bytes,9,opt,name=openid_Weibo,json=openidWeibo" json:"openid_Weibo,omitempty"`
}

func (m *AuthenticateResponse) Reset()                    { *m = AuthenticateResponse{} }
func (m *AuthenticateResponse) String() string            { return proto.CompactTextString(m) }
func (*AuthenticateResponse) ProtoMessage()               {}
func (*AuthenticateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AuthenticateResponse) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *AuthenticateResponse) GetRefreshToken() string {
	if m != nil {
		return m.RefreshToken
	}
	return ""
}

func (m *AuthenticateResponse) GetTokenType() string {
	if m != nil {
		return m.TokenType
	}
	return ""
}

func (m *AuthenticateResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AuthenticateResponse) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *AuthenticateResponse) GetTelephone() string {
	if m != nil {
		return m.Telephone
	}
	return ""
}

func (m *AuthenticateResponse) GetOpenid_Wechat() string {
	if m != nil {
		return m.Openid_Wechat
	}
	return ""
}

func (m *AuthenticateResponse) GetOpenid_QQ() string {
	if m != nil {
		return m.Openid_QQ
	}
	return ""
}

func (m *AuthenticateResponse) GetOpenid_Weibo() string {
	if m != nil {
		return m.Openid_Weibo
	}
	return ""
}

type ValidateTokenRequest struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *ValidateTokenRequest) Reset()                    { *m = ValidateTokenRequest{} }
func (m *ValidateTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*ValidateTokenRequest) ProtoMessage()               {}
func (*ValidateTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ValidateTokenRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type User struct {
	Id            string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Username      string `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	Password      string `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
	Telephone     string `protobuf:"bytes,4,opt,name=telephone" json:"telephone,omitempty"`
	Openid_Wechat string `protobuf:"bytes,6,opt,name=openid_Wechat,json=openidWechat" json:"openid_Wechat,omitempty"`
	Openid_QQ     string `protobuf:"bytes,7,opt,name=openid_QQ,json=openidQQ" json:"openid_QQ,omitempty"`
	Openid_Weibo  string `protobuf:"bytes,8,opt,name=openid_Weibo,json=openidWeibo" json:"openid_Weibo,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *User) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *User) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *User) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *User) GetTelephone() string {
	if m != nil {
		return m.Telephone
	}
	return ""
}

func (m *User) GetOpenid_Wechat() string {
	if m != nil {
		return m.Openid_Wechat
	}
	return ""
}

func (m *User) GetOpenid_QQ() string {
	if m != nil {
		return m.Openid_QQ
	}
	return ""
}

func (m *User) GetOpenid_Weibo() string {
	if m != nil {
		return m.Openid_Weibo
	}
	return ""
}

type AddUserByAuthorizationCodeRequest struct {
	OauthType         OAuthType `protobuf:"varint,1,opt,name=oauth_type,json=oauthType,enum=uma.OAuthType" json:"oauth_type,omitempty"`
	AuthorizationCode string    `protobuf:"bytes,2,opt,name=authorization_code,json=authorizationCode" json:"authorization_code,omitempty"`
}

func (m *AddUserByAuthorizationCodeRequest) Reset()         { *m = AddUserByAuthorizationCodeRequest{} }
func (m *AddUserByAuthorizationCodeRequest) String() string { return proto.CompactTextString(m) }
func (*AddUserByAuthorizationCodeRequest) ProtoMessage()    {}
func (*AddUserByAuthorizationCodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{3}
}

func (m *AddUserByAuthorizationCodeRequest) GetOauthType() OAuthType {
	if m != nil {
		return m.OauthType
	}
	return OAuthType_Wechat
}

func (m *AddUserByAuthorizationCodeRequest) GetAuthorizationCode() string {
	if m != nil {
		return m.AuthorizationCode
	}
	return ""
}

type UpdateUserRequest struct {
	Id                string    `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Username          string    `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	Password          string    `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
	Telephone         string    `protobuf:"bytes,4,opt,name=telephone" json:"telephone,omitempty"`
	AuthorizationCode string    `protobuf:"bytes,5,opt,name=authorization_code,json=authorizationCode" json:"authorization_code,omitempty"`
	OauthType         OAuthType `protobuf:"varint,6,opt,name=oauth_type,json=oauthType,enum=uma.OAuthType" json:"oauth_type,omitempty"`
	SecretCode        int32     `protobuf:"varint,7,opt,name=secret_code,json=secretCode" json:"secret_code,omitempty"`
}

func (m *UpdateUserRequest) Reset()                    { *m = UpdateUserRequest{} }
func (m *UpdateUserRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateUserRequest) ProtoMessage()               {}
func (*UpdateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UpdateUserRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateUserRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *UpdateUserRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *UpdateUserRequest) GetTelephone() string {
	if m != nil {
		return m.Telephone
	}
	return ""
}

func (m *UpdateUserRequest) GetAuthorizationCode() string {
	if m != nil {
		return m.AuthorizationCode
	}
	return ""
}

func (m *UpdateUserRequest) GetOauthType() OAuthType {
	if m != nil {
		return m.OauthType
	}
	return OAuthType_Wechat
}

func (m *UpdateUserRequest) GetSecretCode() int32 {
	if m != nil {
		return m.SecretCode
	}
	return 0
}

type AddUserByTelephoneRequest struct {
	User       *User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	SecretCode int32 `protobuf:"varint,2,opt,name=secret_code,json=secretCode" json:"secret_code,omitempty"`
}

func (m *AddUserByTelephoneRequest) Reset()                    { *m = AddUserByTelephoneRequest{} }
func (m *AddUserByTelephoneRequest) String() string            { return proto.CompactTextString(m) }
func (*AddUserByTelephoneRequest) ProtoMessage()               {}
func (*AddUserByTelephoneRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AddUserByTelephoneRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *AddUserByTelephoneRequest) GetSecretCode() int32 {
	if m != nil {
		return m.SecretCode
	}
	return 0
}

type AddUserResponse struct {
	Id         string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	SecretCode int32  `protobuf:"varint,2,opt,name=secret_code,json=secretCode" json:"secret_code,omitempty"`
}

func (m *AddUserResponse) Reset()                    { *m = AddUserResponse{} }
func (m *AddUserResponse) String() string            { return proto.CompactTextString(m) }
func (*AddUserResponse) ProtoMessage()               {}
func (*AddUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *AddUserResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AddUserResponse) GetSecretCode() int32 {
	if m != nil {
		return m.SecretCode
	}
	return 0
}

type RefreshTokenRequest struct {
	RefreshToken string `protobuf:"bytes,1,opt,name=refresh_token,json=refreshToken" json:"refresh_token,omitempty"`
}

func (m *RefreshTokenRequest) Reset()                    { *m = RefreshTokenRequest{} }
func (m *RefreshTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*RefreshTokenRequest) ProtoMessage()               {}
func (*RefreshTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *RefreshTokenRequest) GetRefreshToken() string {
	if m != nil {
		return m.RefreshToken
	}
	return ""
}

type FetchUserInfoRequest struct {
	Username  string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Telephone string `protobuf:"bytes,2,opt,name=telephone" json:"telephone,omitempty"`
}

func (m *FetchUserInfoRequest) Reset()                    { *m = FetchUserInfoRequest{} }
func (m *FetchUserInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*FetchUserInfoRequest) ProtoMessage()               {}
func (*FetchUserInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *FetchUserInfoRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *FetchUserInfoRequest) GetTelephone() string {
	if m != nil {
		return m.Telephone
	}
	return ""
}

type GenerateSecretCodeRequest struct {
	Telephone     string `protobuf:"bytes,1,opt,name=telephone" json:"telephone,omitempty"`
	DoSendMessage bool   `protobuf:"varint,2,opt,name=doSendMessage" json:"doSendMessage,omitempty"`
}

func (m *GenerateSecretCodeRequest) Reset()                    { *m = GenerateSecretCodeRequest{} }
func (m *GenerateSecretCodeRequest) String() string            { return proto.CompactTextString(m) }
func (*GenerateSecretCodeRequest) ProtoMessage()               {}
func (*GenerateSecretCodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GenerateSecretCodeRequest) GetTelephone() string {
	if m != nil {
		return m.Telephone
	}
	return ""
}

func (m *GenerateSecretCodeRequest) GetDoSendMessage() bool {
	if m != nil {
		return m.DoSendMessage
	}
	return false
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func init() {
	proto.RegisterType((*AuthenticateResponse)(nil), "uma.AuthenticateResponse")
	proto.RegisterType((*ValidateTokenRequest)(nil), "uma.ValidateTokenRequest")
	proto.RegisterType((*User)(nil), "uma.User")
	proto.RegisterType((*AddUserByAuthorizationCodeRequest)(nil), "uma.AddUserByAuthorizationCodeRequest")
	proto.RegisterType((*UpdateUserRequest)(nil), "uma.UpdateUserRequest")
	proto.RegisterType((*AddUserByTelephoneRequest)(nil), "uma.AddUserByTelephoneRequest")
	proto.RegisterType((*AddUserResponse)(nil), "uma.AddUserResponse")
	proto.RegisterType((*RefreshTokenRequest)(nil), "uma.RefreshTokenRequest")
	proto.RegisterType((*FetchUserInfoRequest)(nil), "uma.FetchUserInfoRequest")
	proto.RegisterType((*GenerateSecretCodeRequest)(nil), "uma.GenerateSecretCodeRequest")
	proto.RegisterType((*Empty)(nil), "uma.Empty")
	proto.RegisterEnum("uma.OAuthType", OAuthType_name, OAuthType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Uma service

type UmaClient interface {
	AuthenticateByTelephone(ctx context.Context, in *User, opts ...grpc.CallOption) (*AuthenticateResponse, error)
	AuthenticateByUsername(ctx context.Context, in *User, opts ...grpc.CallOption) (*AuthenticateResponse, error)
	AuthenticateByAuthId(ctx context.Context, in *AddUserByAuthorizationCodeRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error)
	ValidateToken(ctx context.Context, in *ValidateTokenRequest, opts ...grpc.CallOption) (*User, error)
	AddUserByUsername(ctx context.Context, in *User, opts ...grpc.CallOption) (*AddUserResponse, error)
	GenerateSecretCode(ctx context.Context, in *GenerateSecretCodeRequest, opts ...grpc.CallOption) (*AddUserResponse, error)
	AddUserByTelephone(ctx context.Context, in *AddUserByTelephoneRequest, opts ...grpc.CallOption) (*AddUserResponse, error)
	AddUserByAuthId(ctx context.Context, in *AddUserByAuthorizationCodeRequest, opts ...grpc.CallOption) (*AddUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*Empty, error)
	ResetPasswordByTelephone(ctx context.Context, in *AddUserByTelephoneRequest, opts ...grpc.CallOption) (*AddUserResponse, error)
	AuthenticateByRefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error)
	FetchUserByUsername(ctx context.Context, in *FetchUserInfoRequest, opts ...grpc.CallOption) (*User, error)
	FetchUserByTelephone(ctx context.Context, in *FetchUserInfoRequest, opts ...grpc.CallOption) (*User, error)
}

type umaClient struct {
	cc *grpc.ClientConn
}

func NewUmaClient(cc *grpc.ClientConn) UmaClient {
	return &umaClient{cc}
}

func (c *umaClient) AuthenticateByTelephone(ctx context.Context, in *User, opts ...grpc.CallOption) (*AuthenticateResponse, error) {
	out := new(AuthenticateResponse)
	err := grpc.Invoke(ctx, "/uma.Uma/AuthenticateByTelephone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *umaClient) AuthenticateByUsername(ctx context.Context, in *User, opts ...grpc.CallOption) (*AuthenticateResponse, error) {
	out := new(AuthenticateResponse)
	err := grpc.Invoke(ctx, "/uma.Uma/AuthenticateByUsername", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *umaClient) AuthenticateByAuthId(ctx context.Context, in *AddUserByAuthorizationCodeRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error) {
	out := new(AuthenticateResponse)
	err := grpc.Invoke(ctx, "/uma.Uma/AuthenticateByAuthId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *umaClient) ValidateToken(ctx context.Context, in *ValidateTokenRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/uma.Uma/ValidateToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *umaClient) AddUserByUsername(ctx context.Context, in *User, opts ...grpc.CallOption) (*AddUserResponse, error) {
	out := new(AddUserResponse)
	err := grpc.Invoke(ctx, "/uma.Uma/AddUserByUsername", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *umaClient) GenerateSecretCode(ctx context.Context, in *GenerateSecretCodeRequest, opts ...grpc.CallOption) (*AddUserResponse, error) {
	out := new(AddUserResponse)
	err := grpc.Invoke(ctx, "/uma.Uma/GenerateSecretCode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *umaClient) AddUserByTelephone(ctx context.Context, in *AddUserByTelephoneRequest, opts ...grpc.CallOption) (*AddUserResponse, error) {
	out := new(AddUserResponse)
	err := grpc.Invoke(ctx, "/uma.Uma/AddUserByTelephone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *umaClient) AddUserByAuthId(ctx context.Context, in *AddUserByAuthorizationCodeRequest, opts ...grpc.CallOption) (*AddUserResponse, error) {
	out := new(AddUserResponse)
	err := grpc.Invoke(ctx, "/uma.Uma/AddUserByAuthId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *umaClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/uma.Uma/UpdateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *umaClient) ResetPasswordByTelephone(ctx context.Context, in *AddUserByTelephoneRequest, opts ...grpc.CallOption) (*AddUserResponse, error) {
	out := new(AddUserResponse)
	err := grpc.Invoke(ctx, "/uma.Uma/ResetPasswordByTelephone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *umaClient) AuthenticateByRefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error) {
	out := new(AuthenticateResponse)
	err := grpc.Invoke(ctx, "/uma.Uma/AuthenticateByRefreshToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *umaClient) FetchUserByUsername(ctx context.Context, in *FetchUserInfoRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/uma.Uma/FetchUserByUsername", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *umaClient) FetchUserByTelephone(ctx context.Context, in *FetchUserInfoRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/uma.Uma/FetchUserByTelephone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Uma service

type UmaServer interface {
	AuthenticateByTelephone(context.Context, *User) (*AuthenticateResponse, error)
	AuthenticateByUsername(context.Context, *User) (*AuthenticateResponse, error)
	AuthenticateByAuthId(context.Context, *AddUserByAuthorizationCodeRequest) (*AuthenticateResponse, error)
	ValidateToken(context.Context, *ValidateTokenRequest) (*User, error)
	AddUserByUsername(context.Context, *User) (*AddUserResponse, error)
	GenerateSecretCode(context.Context, *GenerateSecretCodeRequest) (*AddUserResponse, error)
	AddUserByTelephone(context.Context, *AddUserByTelephoneRequest) (*AddUserResponse, error)
	AddUserByAuthId(context.Context, *AddUserByAuthorizationCodeRequest) (*AddUserResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*Empty, error)
	ResetPasswordByTelephone(context.Context, *AddUserByTelephoneRequest) (*AddUserResponse, error)
	AuthenticateByRefreshToken(context.Context, *RefreshTokenRequest) (*AuthenticateResponse, error)
	FetchUserByUsername(context.Context, *FetchUserInfoRequest) (*User, error)
	FetchUserByTelephone(context.Context, *FetchUserInfoRequest) (*User, error)
}

func RegisterUmaServer(s *grpc.Server, srv UmaServer) {
	s.RegisterService(&_Uma_serviceDesc, srv)
}

func _Uma_AuthenticateByTelephone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UmaServer).AuthenticateByTelephone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uma.Uma/AuthenticateByTelephone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UmaServer).AuthenticateByTelephone(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uma_AuthenticateByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UmaServer).AuthenticateByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uma.Uma/AuthenticateByUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UmaServer).AuthenticateByUsername(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uma_AuthenticateByAuthId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserByAuthorizationCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UmaServer).AuthenticateByAuthId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uma.Uma/AuthenticateByAuthId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UmaServer).AuthenticateByAuthId(ctx, req.(*AddUserByAuthorizationCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uma_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UmaServer).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uma.Uma/ValidateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UmaServer).ValidateToken(ctx, req.(*ValidateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uma_AddUserByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UmaServer).AddUserByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uma.Uma/AddUserByUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UmaServer).AddUserByUsername(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uma_GenerateSecretCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateSecretCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UmaServer).GenerateSecretCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uma.Uma/GenerateSecretCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UmaServer).GenerateSecretCode(ctx, req.(*GenerateSecretCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uma_AddUserByTelephone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserByTelephoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UmaServer).AddUserByTelephone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uma.Uma/AddUserByTelephone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UmaServer).AddUserByTelephone(ctx, req.(*AddUserByTelephoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uma_AddUserByAuthId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserByAuthorizationCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UmaServer).AddUserByAuthId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uma.Uma/AddUserByAuthId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UmaServer).AddUserByAuthId(ctx, req.(*AddUserByAuthorizationCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uma_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UmaServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uma.Uma/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UmaServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uma_ResetPasswordByTelephone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserByTelephoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UmaServer).ResetPasswordByTelephone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uma.Uma/ResetPasswordByTelephone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UmaServer).ResetPasswordByTelephone(ctx, req.(*AddUserByTelephoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uma_AuthenticateByRefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UmaServer).AuthenticateByRefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uma.Uma/AuthenticateByRefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UmaServer).AuthenticateByRefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uma_FetchUserByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UmaServer).FetchUserByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uma.Uma/FetchUserByUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UmaServer).FetchUserByUsername(ctx, req.(*FetchUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uma_FetchUserByTelephone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UmaServer).FetchUserByTelephone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uma.Uma/FetchUserByTelephone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UmaServer).FetchUserByTelephone(ctx, req.(*FetchUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Uma_serviceDesc = grpc.ServiceDesc{
	ServiceName: "uma.Uma",
	HandlerType: (*UmaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthenticateByTelephone",
			Handler:    _Uma_AuthenticateByTelephone_Handler,
		},
		{
			MethodName: "AuthenticateByUsername",
			Handler:    _Uma_AuthenticateByUsername_Handler,
		},
		{
			MethodName: "AuthenticateByAuthId",
			Handler:    _Uma_AuthenticateByAuthId_Handler,
		},
		{
			MethodName: "ValidateToken",
			Handler:    _Uma_ValidateToken_Handler,
		},
		{
			MethodName: "AddUserByUsername",
			Handler:    _Uma_AddUserByUsername_Handler,
		},
		{
			MethodName: "GenerateSecretCode",
			Handler:    _Uma_GenerateSecretCode_Handler,
		},
		{
			MethodName: "AddUserByTelephone",
			Handler:    _Uma_AddUserByTelephone_Handler,
		},
		{
			MethodName: "AddUserByAuthId",
			Handler:    _Uma_AddUserByAuthId_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Uma_UpdateUser_Handler,
		},
		{
			MethodName: "ResetPasswordByTelephone",
			Handler:    _Uma_ResetPasswordByTelephone_Handler,
		},
		{
			MethodName: "AuthenticateByRefreshToken",
			Handler:    _Uma_AuthenticateByRefreshToken_Handler,
		},
		{
			MethodName: "FetchUserByUsername",
			Handler:    _Uma_FetchUserByUsername_Handler,
		},
		{
			MethodName: "FetchUserByTelephone",
			Handler:    _Uma_FetchUserByTelephone_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "uma.proto",
}

func init() { proto.RegisterFile("uma.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 755 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x8d, 0xdd, 0x7c, 0x79, 0xfa, 0x41, 0xbb, 0x8d, 0x8a, 0x1b, 0x28, 0x50, 0x83, 0x10, 0xaa,
	0x68, 0x0f, 0x41, 0x02, 0x09, 0x09, 0x44, 0x8b, 0x00, 0x55, 0x02, 0xd1, 0xb8, 0x0d, 0x1c, 0x7a,
	0x88, 0xb6, 0xf1, 0x94, 0x58, 0x34, 0x5e, 0xe3, 0xdd, 0x08, 0x85, 0x1b, 0xbf, 0x85, 0x2b, 0x7f,
	0x86, 0x7f, 0xc3, 0x11, 0xed, 0xae, 0xed, 0xda, 0xce, 0x57, 0x91, 0x10, 0xb7, 0xfa, 0x75, 0xe6,
	0xed, 0xcc, 0x9b, 0x99, 0xd7, 0x82, 0x35, 0x1c, 0xd0, 0xbd, 0x30, 0x62, 0x82, 0x91, 0x85, 0xe1,
	0x80, 0x3a, 0x3f, 0x4d, 0x68, 0xec, 0x0f, 0x45, 0x1f, 0x03, 0xe1, 0xf7, 0xa8, 0x40, 0x17, 0x79,
	0xc8, 0x02, 0x8e, 0x64, 0x1b, 0x96, 0x68, 0xaf, 0x87, 0x9c, 0x77, 0x05, 0xfb, 0x8c, 0x81, 0x6d,
	0xdc, 0x31, 0x1e, 0x58, 0xee, 0xa2, 0xc6, 0x4e, 0x24, 0x44, 0xee, 0xc2, 0x72, 0x84, 0xe7, 0x11,
	0xf2, 0x7e, 0x1c, 0x63, 0xaa, 0x98, 0xa5, 0x18, 0xd4, 0x41, 0x5b, 0x00, 0xea, 0x97, 0x5d, 0x31,
	0x0a, 0xd1, 0x5e, 0x50, 0x11, 0x96, 0x42, 0x4e, 0x46, 0x21, 0x92, 0x15, 0x30, 0x7d, 0xcf, 0x2e,
	0x2b, 0xd8, 0xf4, 0x3d, 0xd2, 0x84, 0xfa, 0x90, 0x63, 0x14, 0xd0, 0x01, 0xda, 0x15, 0x85, 0xa6,
	0xdf, 0xe4, 0x26, 0x58, 0x02, 0x2f, 0x30, 0xec, 0xb3, 0x00, 0xed, 0x6a, 0xcc, 0x94, 0x00, 0xb2,
	0x1a, 0x16, 0x62, 0xe0, 0x7b, 0xdd, 0x8f, 0xd8, 0xeb, 0x53, 0x61, 0xd7, 0x74, 0x35, 0x1a, 0xd4,
	0x18, 0xb9, 0x01, 0x56, 0x1c, 0xd4, 0x6e, 0xdb, 0x75, 0xcd, 0xaf, 0x81, 0x76, 0x5b, 0xb6, 0x9c,
	0x32, 0xf8, 0x67, 0xcc, 0xb6, 0x74, 0xcb, 0x09, 0x81, 0x7f, 0xc6, 0x9c, 0x87, 0xd0, 0xf8, 0x40,
	0x2f, 0x7c, 0x8f, 0x0a, 0x54, 0xed, 0xb9, 0xf8, 0x65, 0x88, 0x5c, 0x90, 0x06, 0x54, 0xb2, 0x32,
	0xe9, 0x0f, 0xe7, 0x97, 0x01, 0xe5, 0x0e, 0xc7, 0x28, 0xee, 0xd2, 0x98, 0xd8, 0xa5, 0x59, 0xe8,
	0xb2, 0x09, 0xf5, 0x90, 0x72, 0xfe, 0x95, 0x45, 0x5e, 0x2c, 0x57, 0xfa, 0x9d, 0x57, 0xa0, 0x3c,
	0x57, 0x81, 0xea, 0x3c, 0x05, 0x6a, 0x73, 0x14, 0xa8, 0x8f, 0x2b, 0xf0, 0xdd, 0x80, 0xed, 0x7d,
	0xcf, 0x93, 0x6d, 0x1d, 0x8c, 0xe4, 0xe6, 0xb0, 0xc8, 0xff, 0x46, 0x85, 0xcf, 0x82, 0x97, 0xcc,
	0xc3, 0x44, 0x8f, 0x5d, 0x00, 0x46, 0x87, 0xa2, 0xaf, 0xa7, 0x2e, 0x1b, 0x5f, 0x69, 0xad, 0xec,
	0xc9, 0xdd, 0x7b, 0x2f, 0x73, 0xe4, 0xe8, 0x5d, 0x4b, 0x45, 0xa8, 0x2d, 0xd8, 0x05, 0x42, 0xb3,
	0x54, 0xdd, 0x1e, 0xf3, 0x12, 0x65, 0xd6, 0x68, 0xf1, 0x11, 0xe7, 0xb7, 0x01, 0x6b, 0x9d, 0x50,
	0x0e, 0x41, 0x96, 0x91, 0xbc, 0xf9, 0x7f, 0x44, 0x9e, 0x5c, 0x6a, 0x65, 0x4a, 0xa9, 0x05, 0x21,
	0xaa, 0xf3, 0x84, 0xb8, 0x0d, 0x8b, 0x1c, 0x7b, 0x11, 0x0a, 0x4d, 0x2b, 0xe7, 0x53, 0x71, 0x41,
	0x43, 0xaa, 0xf5, 0x53, 0xd8, 0x4c, 0xd5, 0x3f, 0x49, 0x8a, 0x4a, 0x14, 0xd8, 0x82, 0xb2, 0xec,
	0x50, 0x69, 0xb0, 0xd8, 0xb2, 0xd4, 0x33, 0x4a, 0x21, 0x05, 0x17, 0xc9, 0xcd, 0x31, 0xf2, 0x03,
	0xb8, 0x16, 0x93, 0xa7, 0x36, 0x50, 0x14, 0x75, 0x2e, 0xc7, 0x53, 0x58, 0x77, 0x33, 0xf7, 0x9f,
	0x94, 0x36, 0xe6, 0x15, 0xc6, 0xb8, 0x57, 0x38, 0x47, 0xd0, 0x78, 0x8d, 0xa2, 0xd7, 0x97, 0x15,
	0x1c, 0x06, 0xe7, 0x2c, 0x49, 0xce, 0x4e, 0xd2, 0x98, 0x65, 0x0a, 0x66, 0x61, 0x5a, 0x4e, 0x17,
	0x36, 0xdf, 0x60, 0x80, 0x11, 0x15, 0x78, 0x9c, 0xd6, 0x98, 0xd0, 0xe6, 0x52, 0x8d, 0xe2, 0xa0,
	0xef, 0xc1, 0xb2, 0xc7, 0x8e, 0x31, 0xf0, 0xde, 0x21, 0xe7, 0xf4, 0x93, 0x26, 0xaf, 0xbb, 0x79,
	0xd0, 0xa9, 0x41, 0xe5, 0xd5, 0x20, 0x14, 0xa3, 0x9d, 0x1d, 0xb0, 0xd2, 0x89, 0x12, 0x80, 0xaa,
	0x3e, 0xb7, 0xd5, 0x12, 0xa9, 0x82, 0xd9, 0x6e, 0xaf, 0x1a, 0xc4, 0x82, 0x8a, 0xba, 0xa0, 0x55,
	0xb3, 0xf5, 0xa3, 0x06, 0x0b, 0x9d, 0x01, 0x25, 0xfb, 0x70, 0x3d, 0xeb, 0xbd, 0x99, 0x89, 0x92,
	0xcb, 0xe1, 0x35, 0x37, 0xd5, 0x8f, 0x93, 0x4c, 0xda, 0x29, 0x91, 0x17, 0xb0, 0x91, 0xa7, 0xe8,
	0x24, 0xc2, 0x5c, 0x95, 0xe1, 0x34, 0xff, 0x07, 0x40, 0x1f, 0xf5, 0xa1, 0x47, 0xee, 0xeb, 0xa4,
	0x79, 0xa7, 0x3e, 0x9b, 0xfc, 0x09, 0x2c, 0xe7, 0xfc, 0x92, 0xe8, 0xe8, 0x49, 0x1e, 0xda, 0xbc,
	0x2c, 0xd8, 0x29, 0x91, 0xc7, 0xb0, 0x96, 0x3e, 0x3d, 0xa9, 0xa5, 0x46, 0xb6, 0xba, 0xcc, 0x83,
	0x6f, 0x81, 0x8c, 0x0f, 0x9c, 0xdc, 0x52, 0xd1, 0x53, 0x37, 0x61, 0x16, 0xdb, 0xf8, 0xb5, 0xc5,
	0x6c, 0x53, 0xcf, 0x70, 0x2a, 0x5b, 0x3b, 0x3d, 0xaf, 0xbf, 0x16, 0x79, 0x1a, 0x65, 0x0b, 0xe0,
	0xd2, 0x08, 0xc9, 0x86, 0xd6, 0xa7, 0xe8, 0x8c, 0x4d, 0x50, 0xb8, 0xda, 0x53, 0xa7, 0x44, 0x5c,
	0xb0, 0x5d, 0xe4, 0x28, 0x8e, 0x62, 0xc3, 0xfb, 0x17, 0xad, 0x1d, 0x43, 0x33, 0xbf, 0x44, 0x59,
	0x0f, 0x20, 0xb6, 0xca, 0x9a, 0x60, 0x0b, 0xb3, 0x97, 0xe7, 0x19, 0xac, 0xa7, 0x76, 0x90, 0xd9,
	0x02, 0x9d, 0x33, 0xc9, 0x28, 0xf2, 0x2b, 0xf4, 0x3c, 0xe3, 0x26, 0xd9, 0x1e, 0xaf, 0x98, 0x7f,
	0x56, 0x55, 0xff, 0x26, 0x3d, 0xfa, 0x13, 0x00, 0x00, 0xff, 0xff, 0x14, 0x82, 0x69, 0x7a, 0x33,
	0x09, 0x00, 0x00,
}
